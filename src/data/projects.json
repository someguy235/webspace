[
  {
    "name": ["Ranger"],
    "link": [""],
    "tech": ["VueJS", "LeafletJS", "PassportJS", "MongoDB", "Express"],
    "github": "http://github.com/someguy235/ranger",
    "img": [
      {
        "alt": "ranger screenshot",
        "src": "ranger-min"
      }
    ],
    "desc": "I've visited a lot of the US National Parks over the last few years, and I wanted a way to visualize those trips, the parks I have and haven't been to, etc. Filter trips and/or parks, and display routes and locations on a Leaflet Mapbox map. Includes Passport/JWT auth layer enabling user sign-ups, and a full set of 63 custom-made parks icons. Work in progress (98/100%)."
  },
  {
    "name": ["SetListr"],
    "link": ["https://www.ethanshepherd.com/setlistr"],
    "tech": ["ReactJS", "TypeScript", "NodeJS", "MongoDB", "Express"],
    "github": "http://github.com/someguy235/setlistr",
    "img": [
      {
        "alt": "setlistr screenshot",
        "src": "setlist-min"
      }
    ],
    "desc": "I started listening to jam band sets on my long weekend runs, and was wondering which ones had the highest ratio of my favorite songs. I made this tool to answer that question. Built with React and Express on the Spotify API, also caches album info in a MongoDB instance. Learned a lot about how messy Spotify metadata is."
  },
  {
    "name": ["Personal Website"],
    "id": "personal-website",
    "link": ["https://www.ethanshepherd.com/"],
    "tech": ["ReactJS", "NodeJS", "Express"],
    "github": "https://github.com/someguy235/webspace",
    "img": [
      {
        "alt": "personal website light screenshot",
        "src": "webspace-light-min"
      },
      {
        "alt": "personal website dark screenshot",
        "src": "webspace-dark-min"
      }
    ],
    "desc": "Rebuild of this website using React. Mobile-friendly, automatic or manual day/night mode, animated <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel='noreferrer'>Game of Life</a> header."
  },
  {
    "name": ["NCEI Normals Quick Access"],
    "link": ["https://www.ncei.noaa.gov/access/us-climate-normals/"],
    "tech": ["ReactJS"],
    "github": "",
    "img": [
      {
        "alt": "NCEI Normals screenshot",
        "src": "normals-2-min"
      }
    ],
    "desc": "Streamlined access to the most popular variables from several versions of NCEI's decadal <a href='https://www.ncei.noaa.gov/products/land-based-station/us-climate-normals' target='_blank' rel='noreferrer'>Climate Normals</a> project. Users can view normals station data for several time periods, and links are provided to more detailed reports and station metadata. Built on the NCEI <a href='https://www.ncei.noaa.gov/access/search/index' target='_blank' rel='noreferrer'>Common Access</a> web service."
  },
  {
    "name": ["2017 Eclipse Traffic"],
    "link": [""],
    "tech": ["JavaScript", "OpenCV", "Python"],
    "github": "http://github.com/someguy235/eclipse-traffic",
    "img": [
      {
        "alt": "eclipse traffic screenshot",
        "src": "eclipse-min"
      }
    ],
    "desc": "Lots of conversations I had before the 2017 eclipse involved guessing what the traffic situation was going to be like, so I decided it would be neat to visualize it and threw this project together at the last minute. I created a simple HTML page that showed the map I was interested in, with the Google traffic data layer. The page used <a href='https://html2canvas.hertzen.com/' target='_blank' rel='noreferrer'>html2canvas.js</a> to create an HTML canvas version of the map after it loads. I set up <a href='http://phantomjs.org/' target='_blank' rel='noreferrer'>phantomJS</a> to scrape that page every 10 minutes. After the traffic died down, I used Python and <a href='http://opencv.org/' target='_blank' rel='noreferrer'>OpenCV</a> to add a layer to the images with the time and totality path from <a href='http://www.eclipsewise.com/solar/SEnews/TSE2017/TSE2017tab/TSE2017-Tab1-7c.pdf' target='_blank' rel='noreferrer'>this</a> data. Finally I merged all the images in Photoshop. You can see the final results <a href='https://i.imgur.com/YWCA76v.gif' target='_blank' rel='noreferrer'>here</a>."
  },
  {
    "name": ["Paleo DIVER", "DIVER API"],
    "link": [
      "https://www.ncei.noaa.gov/access/paleo-search/",
      "https://www.ncei.noaa.gov/access/paleo-search/api"
    ],
    "tech": ["ReactJS", "D3JS", "Java", "Spring", "Oracle"],
    "github": "",
    "img": [
      {
        "alt": "Paleo DIVER screenshot",
        "src": "paleo-min"
      }
    ],
    "desc": "This is NCEI's Paleoclimatology study search and access tool, for which I am the principal developer. It is a Spring application using myBatis/Oracle providing a RESTful API, and a newly refactored search interface built with ReactJS. The interface allows searching over popular fields such as study investigators, locations, and time periods, and was recently updated to support terms from the multi-year Controlled Variables standardization project. Bulk data access is enabled via a data bundling api and through the UI."
  },
  {
    "name": ["Lifetracker"],
    "link": [""],
    "tech": ["Android"],
    "github": "http://github.com/someguy235/lifetracker",
    "img": [
      {
        "alt": "lifetracker screenshot 1",
        "src": "lifetracker-1-min"
      },
      {
        "alt": "lifetracker screenshot 2",
        "src": "lifetracker-2-min"
      },
      {
        "alt": "lifetracker screenshot 3",
        "src": "lifetracker-3-min"
      }
    ],
    "desc": "I was looking for a simple tool to keep track of some basic recurring information, e.g. how much do I sleep, how much time am I spending on classwork, etc. I couldn't find anything I liked, so I built an Android application. Basic functionality is done and I'm adding features as I have time. The most current apk is available <a href='./LifeTracker.apk'>here</a>."
  },
  {
    "name": ["NCEI Climate Atlas"],
    "link": ["https://www.ncei.noaa.gov/access/climateatlas/"],
    "tech": ["jQuery"],
    "github": "",
    "img": [
      {
        "alt": "climate atlas screenshot",
        "src": "climateatlas-min"
      }
    ],
    "desc": "Simple image viewer for nClimGrid Normals maps, with several comparison options."
  },

  {
    "name": ["Asheville Crime Mapper"],
    "link": [""],
    "tech": ["AngularJS", "NodeJS", "LeafletJS", "MongoDB"],
    "github": "http://github.com/someguy235/avlcrime",
    "img": [
      {
        "alt": "asheville crime screenshot",
        "src": "avlcrime-min"
      }
    ],
    "desc": "I used some of Asheville's open city data to map crime information for the area. Data is pulled from the city data web service, and stored locally to a mondgodb instance. It's then displayed interactively using lefalet.js/heatmap.js. Unfortunately the city's GIS service is no longer active so the tool is not current. "
  },
  {
    "name": [
      "NCEI Historical Observational Metadata Repository (HOMR)",
      "HOMR API"
    ],
    "link": [
      "http://www.ncei.noaa.gov/access/homr",
      "http://www.ncei.noaa.gov/access/homr/api"
    ],
    "tech": ["jQuery", "D3JS", "Java", "Spring", "Oracle"],
    "github": "",
    "img": [
      {
        "alt": "homr screenshot",
        "src": "homr-min"
      }
    ],
    "desc": "This is NCEI's station metadata access system, for which I am the sole developer. It's a standard Spring MVC application using iBatis mappings into an Oracle database to serve a RESTful web service. The metadata search and visualizations are built on this service, and are presented as a single-page app. On the locations tab I implemented a new system for displaying station locations where we don't have precise coordinates, showing areas instead of points for these types of stations. D3.js is used for the Gantt chart on the MSHR tab."
  },
  {
    "name": ["Friendly Library"],
    "link": [""],
    "tech": ["Groovy", "Grails", "AngularJS", "Postgres"],
    "github": "http://github.com/someguy235/friendlibrary",
    "img": [
      {
        "alt": " screenshot",
        "src": "friendlib-min"
      }
    ],
    "desc": "FrindlyLib lets people create a catalog of their book, movies, and other physical media, and keep track of them when they're loaned out. Users can also search among their friends for items they want to borrow. I've used this project to learn a few technologies, so it's kind of a mess and never finished."
  },
  {
    "name": ["Asheville Transit Mobile"],
    "link": [""],
    "tech": ["JavaScript", "Groovy"],
    "github": "http://github.com/someguy235/asheville-transit",
    "img": [
      {
        "alt": " screenshot",
        "src": "transit-min"
      }
    ],
    "desc": "I did a mobile-first redesign of the Asheville Transit website, including an interactive route map, for a class I took. It uses some Groovy scripts to assemble the route files into kml format."
  },
  {
    "name": ["Robot Race"],
    "link": [""],
    "tech": ["Java"],
    "github": "http://github.com/someguy235/robotRace",
    "img": [
      {
        "alt": " screenshot",
        "src": "robotrace-min"
      }
    ],
    "desc": "Java/Swing implementation of the Robo-Rally board game by Wizard of the Coast."
  }
]
